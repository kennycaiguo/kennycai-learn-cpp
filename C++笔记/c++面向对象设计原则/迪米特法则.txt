一个对象对其它对象尽可能少的了解。如在一个程序中，各个模块之间相互调用时，
通常会提供一个统一的接口来实现。这样子当一个模块内部的实现发生改变时，
编号影响其它模块的使用

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <algorithm>
#include <sstream>
/*
  迪米特法则案例
*/
using namespace std;
//定义一个抽象基类
class AbstractBuilding
{
public:
	virtual void sale() = 0;
	virtual string getQuality() = 0;
};

class BuildingA :public AbstractBuilding
{
public:
	BuildingA()
	{
		m_Quality = "高品质楼盘";
	}
	virtual void sale()
	{
		cout << "楼盘A，" <<m_Quality<<"，以200万成交！！！" <<endl;
	}
	virtual string getQuality()
	{
		return m_Quality;
	}
public:
	string m_Quality;
};

class BuildingB :public AbstractBuilding
{
public:
	BuildingB()
	{
		m_Quality = "低品质楼盘";
	}
	virtual void sale()
	{
		cout << "楼盘A，" << m_Quality << "，以100万成交！！！" << endl;
	}
	virtual string getQuality()
	{
		return m_Quality;
	}
public:
	string m_Quality;
};

//中介类
class Mediator
{
public:
	Mediator()
	{
		AbstractBuilding* building = new BuildingA;
		vBuilding.push_back(building);
		building = new BuildingB;
		vBuilding.push_back(building);
	}
	AbstractBuilding* LookForMyBuilding(string Quality)
	{
		for (vector<AbstractBuilding*>::iterator it = vBuilding.begin(); it != vBuilding.end(); it++)
		{
			if ((*it)->getQuality()==Quality)
			{
				return *it;
			}
		}
		return NULL;
	}
	~Mediator()
	{
		for (vector<AbstractBuilding*>::iterator it = vBuilding.begin(); it != vBuilding.end(); it++)
		{
			if (*it != NULL)
			{
				delete *it;
			}
		}
	}
public:
	vector<AbstractBuilding* > vBuilding;
};

//客户端实现
void testMediator()
{
	Mediator* pm = new Mediator;
	AbstractBuilding* mybuilding = pm->LookForMyBuilding("高品质楼盘");
	if (mybuilding == NULL)
	{
		cout << "很遗憾，没有找到你要的楼盘";
	}
	else
	{
		mybuilding->sale();
	}
	 
	delete pm;
}
int main(int argc, char const *argv[])
{
	testMediator();

	system("pause");
	return 0;
}