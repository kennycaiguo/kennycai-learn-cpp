单向循环链表不是以NULL结束，它最后一个节点的next指向头节点。
所以一些函数的写法与非循环链表有点不一样。
实例：有三个文件：
CircleLinkList.h,CircleLinkList.c,main.c

CircleLinkList.h的内容：
#ifndef CIRCLELINKLIST_H
#define CIRCLELINKLIST_H
#include<stdio.h>
#include<stdlib.h>

//定义循环链表小节点，（企业链表思路）
typedef struct CIRCLELINKNODE{
	struct CIRCLELINKNODE *next;

}CircleLinkNode;

//链表结构体
typedef struct CIRCLELINLIST{
	struct CIRCLELINKNODE head;
	int size;

}CircleLinkList;

//定义一个宏来表示真和假
#define CIRCLELINLIST_TRUE 1 //表示真
#define CIRCLELINLIST_FALSE 0//表示假
//定义一个根据值来比较节点数据的回调函数（函数指针），为了能够找到需要删除的数据
typedef int(*COMPARENODE)(CircleLinkNode* , CircleLinkNode* );
////定义一个输出较节点数据的回调函数（函数指针）
typedef void(*PRINTNODE)(CircleLinkNode*);
//1.初始化链表
CircleLinkList* Init_CircleLinkList();
//2.插入数据
void InsertInto_CirlcleLinkList(CircleLinkList* list,int pos,CircleLinkNode *data);
//3.获取第一个元素
CircleLinkNode* FrontOf_CircleLinkList(CircleLinkList* list);
//4.根据位置删除数据
void RemoveByPosFrom_CircleLinkList(CircleLinkList* list, int pos);
//5.根据值删除数据,需要一个回调函数
void RemoveByValueFrom_CirCleLinkList(CircleLinkList* list, CircleLinkNode *data,COMPARENODE compare);
//5.根据值删除数据,需要一个回调函数
void RemoveByValueFrom_CirCleLinkListMe(CircleLinkList* list, CircleLinkNode *data, COMPARENODE compare);
//6.获取链表的长度
int SizeOf_CircleLinkList(CircleLinkList* list);
//7.查找节点
int FindNode_In_CircleLinkList(CircleLinkList* list, CircleLinkNode* data, COMPARENODE compare);
 

//8.遍历输出所有节点
void Print_CircleLinkList(CircleLinkList* list, PRINTNODE print);
//8.遍历输出所有节点
void Print_CircleLinkListMe(CircleLinkList* list, PRINTNODE print);
//9.判断链表是否位空
int IsEmpty_CilcleLinkList(CircleLinkList* list);
//10.释放内存
void Free_CircleLinkList(CircleLinkList* list);
#endif
========================
CircleLinkList.c的内容：
#include"CircleLinkList.h"

//1.初始化链表
CircleLinkList* Init_CircleLinkList() //ok
{
	CircleLinkList* list = (CircleLinkList*)malloc(sizeof(CircleLinkList));
	list->head.next = &(list->head);
	list->size = 0;
	
	return list;
}
//2.插入数据
void InsertInto_CirlcleLinkList(CircleLinkList* list, int pos, CircleLinkNode *data)//ok
{
	if (list == NULL)
	{
		return;
	}
	if (data == NULL)
	{
		return;
	}
	if (pos<0 || pos>list->size)
	{
		pos = list->size;
	}
	//查找需要插入的位置的前一个节点
	CircleLinkNode *pCurrent = &(list->head);
	for (int i = 0; i < pos; i++)
	{
		pCurrent = pCurrent->next;
	}
	//插入节点
	data->next = pCurrent->next;
	pCurrent->next = data;
	//更新列表长度
	list->size++;
}
//3.获取第一个元素
CircleLinkNode* FrontOf_CircleLinkList(CircleLinkList* list) //ok
{
	return list->head.next;
}
//4.根据位置删除数据
void RemoveByPosFrom_CircleLinkList(CircleLinkList* list, int pos)//ok
{
	if (list == NULL)
	{
		return;
	}
	if (pos < 0 || pos >= list->size)
	{
		return;
	}
	CircleLinkNode *pPrev = &(list->head);
	CircleLinkNode *pCurrent = pPrev->next;
	for (int i = 0; i < pos; i++)
	{
		pPrev = pCurrent;
		pCurrent = pPrev->next;
	}
	 
	pPrev->next = pCurrent->next;
	//减少链表长度
	list->size--;
}
//5.根据值删除数据,需要一个回调函数
void RemoveByValueFrom_CirCleLinkList(CircleLinkList* list, CircleLinkNode *data, COMPARENODE compare)
{
	//合法性检查
	if (list == NULL)
	{
		return;
	}

	if (data == NULL)
	{
		return;
	}
	CircleLinkNode *pPrev = &(list->head);
	CircleLinkNode *pCurrent = pPrev->next;
	//这个是循环链表，不是以NULL结束
	int i = 0;
	 
	for (i = 0; i < list->size; i++)
	{
		if (compare(pCurrent, data) == CIRCLELINLIST_TRUE)
		{
			pPrev->next = pCurrent->next;
            list->size--;
			break;
		}
		pPrev = pCurrent;
		pCurrent = pPrev->next;
	
	}
	 
 
}
//5.根据值删除数据,需要一个回调函数
void RemoveByValueFrom_CirCleLinkListMe(CircleLinkList* list, CircleLinkNode *data, COMPARENODE compare)
{
	//合法性检查
	if (list == NULL)
	{
		return;
	}
	 
	if (data == NULL)
	{
		return;
	}
	CircleLinkNode *pPrev = &(list->head);
	CircleLinkNode *pCurrent = pPrev->next;
	//这个是循环链表，不是以NULL结束
	while (pCurrent=&(list->head))
	{
		if (compare(pCurrent, data) == 0)
		{
			pPrev->next = pCurrent->next;
			//减少链表长度
			list->size--;
			break;
		}
		pPrev = pCurrent;
		pCurrent =pPrev->next;
	}
	 	
}
//6.获取链表的长度
int SizeOf_CircleLinkList(CircleLinkList* list) //ok
{
	return list->size;
}

//7.查找节点
int FindNode_In_CircleLinkList(CircleLinkList* list, CircleLinkNode* data, COMPARENODE compare)
{
	//合法性检查
	if (list == NULL)
	{
		return -1;
	}

	if (data == NULL)
	{
		return -1;
	}
	int pos = -1;
	 
	CircleLinkNode *pCurrent = list->head.next;
	for (int i = 0; i < list->size; i++)
	{
		if (compare(pCurrent, data) == CIRCLELINLIST_TRUE)
		{
			pos = i;
			break;
		}
		pCurrent = pCurrent->next;
	}
	return pos;
}

 

//8.遍历输出所有节点
void Print_CircleLinkList(CircleLinkList* list, PRINTNODE print)//ok
{
	//合法性检查
	if (list == NULL)
	{
		return;
	}
	CircleLinkNode *pCurrent = list->head.next;
	for (int i = 0; i < list->size; i++)
	{
		print(pCurrent);
		pCurrent = pCurrent->next;
	}
}
//8.遍历输出所有节点
void Print_CircleLinkListMe(CircleLinkList* list, PRINTNODE print)//ok
{

	//合法性检查
	if (list == NULL)
	{
		return;
	}
	CircleLinkNode *pCurrent = list->head.next;
	 
	while (pCurrent != &(list->head))
	{
		print(pCurrent);
	    pCurrent = pCurrent->next;
	}
}

//9.判断链表是否位空
int IsEmpty_CilcleLinkList(CircleLinkList* list)
{
	if (list->size ==0)
	{
		return CIRCLELINLIST_TRUE;
	}
	return CIRCLELINLIST_FALSE;
}

//10.释放内存

void Free_CircleLinkList(CircleLinkList* list)
{
	if (list == NULL)
	{
		return;
	}
	list->size = 0;
	free(list);
	 
}
======================
main.c的内容：
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include"CircleLinkList.h"

typedef struct Person
{
	CircleLinkNode node;
	char name[64];
	int age;
	int money;
}Person;

void MyPrint(CircleLinkNode* node)
{
	Person* p = (Person*)node;
	printf("Person[name:%s,age:%d,money:%d]\n",p->name,p->age,p->money);
}

int MyCompare(CircleLinkNode* n1, CircleLinkNode* n2)
{
	Person* p1 = (Person*)n1;
	Person* p2 = (Person*)n2;
	if ((strcmp(p1->name, p2->name) == 0) && (p1->age==p2->age) && (p1->money==p2->money))
	{
		return CIRCLELINLIST_TRUE;
	}
	return CIRCLELINLIST_FALSE;
}
void testCircleLinkList()
{
	CircleLinkList* plist = Init_CircleLinkList();
	//创建数据
	Person persons[] = {
			{NULL, "Jack", 28,21000 },
			{NULL, "Didi", 18,18000 },
			{NULL,"Edwin", 17,15000 },
			{NULL,"eminly", 19,10000 },
			{NULL, "fanny", 21,20000 },
	};
	//将数据插入链表
	for (int i = 0; i < 5; i++)
	{
		InsertInto_CirlcleLinkList(plist, 100, (CircleLinkNode*)&persons[i]);
	}
	////遍历输出所有节点数据
	//Print_CircleLinkList(plist, MyPrint);
	//遍历输出所有节点数据
	Print_CircleLinkListMe(plist, MyPrint);
	//显示链表大小
	printf("===============the size of linklist:%d==============\n",SizeOf_CircleLinkList(plist));
	//获取第一个节点
	Person* p = (Person*)FrontOf_CircleLinkList(plist);
	printf("first node :*******************Person[name:%s,age:%d,money:%d*****************\n",p->name,p->age,p->money);
	//查找
	int pos = FindNode_In_CircleLinkList(plist, (CircleLinkNode*)&persons[4],MyCompare);
	printf("position:%d\n", pos);
	//判断链表是否为空
	int flag = IsEmpty_CilcleLinkList(plist);
	if (flag == CIRCLELINLIST_TRUE)
	{
		printf("the linklist is empty\n");
	}
	else
	{
		printf("the linklist is  not empty.....\n");
	}
	//按照位置删除节点
	//RemoveByPosFrom_CircleLinkList(plist, 3);
	//按值删除节点
	//RemoveByValueFrom_CirCleLinkListMe(plist, (CircleLinkNode*)&persons[4],MyCompare);
	RemoveByValueFrom_CirCleLinkList(plist, (CircleLinkNode*)&persons[4], MyCompare);
	Print_CircleLinkList(plist, MyPrint);
	//释放内存
	Free_CircleLinkList(plist);
}
int main(int argc, char const *argv[])
{
	testCircleLinkList();
	system("pause");
	return 0;
}