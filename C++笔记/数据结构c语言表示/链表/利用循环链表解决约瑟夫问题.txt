
循环链表的应用--约瑟夫问题：
M个人围成一圈，从第一个人开始报数，报到n，第n个人出列，然后又从第n+1个人从1开始报数，报到第n，
第n个人出列。。。。一直到剩下 最后一个人，该人也出列，完成。

实例：有三个文件：
CircleLinkList.h,CircleLinkList.c,约瑟夫问题.c

CircleLinkList.h的内容：
#ifndef CIRCLELINKLIST_H
#define CIRCLELINKLIST_H
#include<stdio.h>
#include<stdlib.h>

//定义循环链表小节点，（企业链表思路）
typedef struct CIRCLELINKNODE{
	struct CIRCLELINKNODE *next;

}CircleLinkNode;

//链表结构体
typedef struct CIRCLELINLIST{
	struct CIRCLELINKNODE head;
	int size;

}CircleLinkList;

//定义一个宏来表示真和假
#define CIRCLELINLIST_TRUE 1 //表示真
#define CIRCLELINLIST_FALSE 0//表示假
//定义一个根据值来比较节点数据的回调函数（函数指针），为了能够找到需要删除的数据
typedef int(*COMPARENODE)(CircleLinkNode* , CircleLinkNode* );
////定义一个输出较节点数据的回调函数（函数指针）
typedef void(*PRINTNODE)(CircleLinkNode*);
//1.初始化链表
CircleLinkList* Init_CircleLinkList();
//2.插入数据
void InsertInto_CirlcleLinkList(CircleLinkList* list,int pos,CircleLinkNode *data);
//3.获取第一个元素
CircleLinkNode* FrontOf_CircleLinkList(CircleLinkList* list);
//4.根据位置删除数据
void RemoveByPosFrom_CircleLinkList(CircleLinkList* list, int pos);
//5.根据值删除数据,需要一个回调函数
void RemoveByValueFrom_CirCleLinkList(CircleLinkList* list, CircleLinkNode *data,COMPARENODE compare);
//5.根据值删除数据,需要一个回调函数
void RemoveByValueFrom_CirCleLinkListMe(CircleLinkList* list, CircleLinkNode *data, COMPARENODE compare);
//6.获取链表的长度
int SizeOf_CircleLinkList(CircleLinkList* list);
//7.查找节点
int FindNode_In_CircleLinkList(CircleLinkList* list, CircleLinkNode* data, COMPARENODE compare);
 

//8.遍历输出所有节点
void Print_CircleLinkList(CircleLinkList* list, PRINTNODE print);
//8.遍历输出所有节点
void Print_CircleLinkListMe(CircleLinkList* list, PRINTNODE print);
//9.判断链表是否位空
int IsEmpty_CilcleLinkList(CircleLinkList* list);
//10.释放内存
void Free_CircleLinkList(CircleLinkList* list);
#endif
========================
CircleLinkList.c的内容：
#include"CircleLinkList.h"

//1.初始化链表
CircleLinkList* Init_CircleLinkList() //ok
{
	CircleLinkList* list = (CircleLinkList*)malloc(sizeof(CircleLinkList));
	list->head.next = &(list->head);
	list->size = 0;
	
	return list;
}
//2.插入数据
void InsertInto_CirlcleLinkList(CircleLinkList* list, int pos, CircleLinkNode *data)//ok
{
	if (list == NULL)
	{
		return;
	}
	if (data == NULL)
	{
		return;
	}
	if (pos<0 || pos>list->size)
	{
		pos = list->size;
	}
	//查找需要插入的位置的前一个节点
	CircleLinkNode *pCurrent = &(list->head);
	for (int i = 0; i < pos; i++)
	{
		pCurrent = pCurrent->next;
	}
	//插入节点
	data->next = pCurrent->next;
	pCurrent->next = data;
	//更新列表长度
	list->size++;
}
//3.获取第一个元素
CircleLinkNode* FrontOf_CircleLinkList(CircleLinkList* list) //ok
{
	return list->head.next;
}
//4.根据位置删除数据
void RemoveByPosFrom_CircleLinkList(CircleLinkList* list, int pos)//ok
{
	if (list == NULL)
	{
		return;
	}
	if (pos < 0 || pos >= list->size)
	{
		return;
	}
	CircleLinkNode *pPrev = &(list->head);
	CircleLinkNode *pCurrent = pPrev->next;
	for (int i = 0; i < pos; i++)
	{
		pPrev = pCurrent;
		pCurrent = pPrev->next;
	}
	 
	pPrev->next = pCurrent->next;
	//减少链表长度
	list->size--;
}
//5.根据值删除数据,需要一个回调函数
void RemoveByValueFrom_CirCleLinkList(CircleLinkList* list, CircleLinkNode *data, COMPARENODE compare)
{
	//合法性检查
	if (list == NULL)
	{
		return;
	}

	if (data == NULL)
	{
		return;
	}
	CircleLinkNode *pPrev = &(list->head);
	CircleLinkNode *pCurrent = pPrev->next;
	//这个是循环链表，不是以NULL结束
	int i = 0;
	 
	for (i = 0; i < list->size; i++)
	{
		if (compare(pCurrent, data) == CIRCLELINLIST_TRUE)
		{
			pPrev->next = pCurrent->next;
            list->size--;
			break;
		}
		pPrev = pCurrent;
		pCurrent = pPrev->next;
	
	}
	 
 
}
//5.根据值删除数据,需要一个回调函数
void RemoveByValueFrom_CirCleLinkListMe(CircleLinkList* list, CircleLinkNode *data, COMPARENODE compare)
{
	//合法性检查
	if (list == NULL)
	{
		return;
	}
	 
	if (data == NULL)
	{
		return;
	}
	CircleLinkNode *pPrev = &(list->head);
	CircleLinkNode *pCurrent = pPrev->next;
	//这个是循环链表，不是以NULL结束
	while (pCurrent=&(list->head))
	{
		if (compare(pCurrent, data) == 0)
		{
			pPrev->next = pCurrent->next;
			//减少链表长度
			list->size--;
			break;
		}
		pPrev = pCurrent;
		pCurrent =pPrev->next;
	}
	 	
}
//6.获取链表的长度
int SizeOf_CircleLinkList(CircleLinkList* list) //ok
{
	return list->size;
}

//7.查找节点
int FindNode_In_CircleLinkList(CircleLinkList* list, CircleLinkNode* data, COMPARENODE compare)
{
	//合法性检查
	if (list == NULL)
	{
		return -1;
	}

	if (data == NULL)
	{
		return -1;
	}
	int pos = -1;
	 
	CircleLinkNode *pCurrent = list->head.next;
	for (int i = 0; i < list->size; i++)
	{
		if (compare(pCurrent, data) == CIRCLELINLIST_TRUE)
		{
			pos = i;
			break;
		}
		pCurrent = pCurrent->next;
	}
	return pos;
}

 

//8.遍历输出所有节点
void Print_CircleLinkList(CircleLinkList* list, PRINTNODE print)//ok
{
	//合法性检查
	if (list == NULL)
	{
		return;
	}
	CircleLinkNode *pCurrent = list->head.next;
	for (int i = 0; i < list->size; i++)
	{
		print(pCurrent);
		pCurrent = pCurrent->next;
	}
}
//8.遍历输出所有节点
void Print_CircleLinkListMe(CircleLinkList* list, PRINTNODE print)//ok
{

	//合法性检查
	if (list == NULL)
	{
		return;
	}
	CircleLinkNode *pCurrent = list->head.next;
	 
	while (pCurrent != &(list->head))
	{
		print(pCurrent);
	    pCurrent = pCurrent->next;
	}
}

//9.判断链表是否位空
int IsEmpty_CilcleLinkList(CircleLinkList* list)
{
	if (list->size ==0)
	{
		return CIRCLELINLIST_TRUE;
	}
	return CIRCLELINLIST_FALSE;
}

//10.释放内存

void Free_CircleLinkList(CircleLinkList* list)
{
	if (list == NULL)
	{
		return;
	}
	list->size = 0;
	free(list);
	 
}
======================
约瑟夫问题.c的内容：
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "CircleLinkList.h"

//循环链表的应用--约瑟夫问题
/*
 M个人围成一圈，从第一个人开始报数，报到n，第n个人出列，然后又从第n+1个人从1开始报数，报到第n，第n个人出列。。。。一直到剩下
 最后一个人，该人也出列，完成。
*/
#define M 8
#define N 3

typedef struct MYNUM
{
	CircleLinkNode node;
	int val;
}MyNum;

void MyPrint(CircleLinkNode* data)
{
	MyNum* pnum = (MyNum*)data;
	printf("%d  ", pnum->val);
}

int MyCompare(CircleLinkNode*n1, CircleLinkNode*n2)
{
	MyNum* pn1 = (MyNum*)n1;
	MyNum* pn2 = (MyNum*)n2;
	if (pn1->val == pn2->val)
	{
		return CIRCLELINLIST_TRUE;
	}
	return CIRCLELINLIST_FALSE;
}
void testJoseph()
{
	//1.创建一个链表
	CircleLinkList* clist = Init_CircleLinkList();
	//2.创建一个又8个元素是数组
	MyNum num[M];
	for (int i = 0; i < 8; i++)
	{
		num[i].val = i + 1;
		InsertInto_CirlcleLinkList(clist, i, (CircleLinkNode*)&num[i]);
	}
	//遍历输出
	Print_CircleLinkList(clist, MyPrint);
	printf("\n");
	//约瑟夫问题推演
	//1.需要一个变量记录当前到第几
	int index = 1;
	//2.需要一个辅助指针标记节点的位置
	CircleLinkNode* pCurrent = clist->head.next;
	//循环次数不能确定，需要使用while循环
	while (SizeOf_CircleLinkList(clist)>1)
	{
		if (index == N)
		{
			MyNum* tmp = (MyNum*)pCurrent;
			printf("%d ",tmp->val);
			//缓存待删除节点是下一个节点
			CircleLinkNode* pNext = pCurrent->next;
			//根据值删除,size会减少
			RemoveByValueFrom_CirCleLinkList(clist, pCurrent, MyCompare);
			//如果碰到头节点必须跳过去
			pCurrent = pNext;
			if (pCurrent == &(clist->head))
			{
				pCurrent = pCurrent->next;
			}
			//重置index
			index = 1;
			 
		}
		pCurrent = pCurrent->next;
		if (pCurrent == &(clist->head))
		{
			pCurrent = pCurrent->next;
		}
		index++;
		
	}
	if (SizeOf_CircleLinkList(clist) == 1)
	{
		MyNum* pn = (MyNum*)FrontOf_CircleLinkList(clist);
		printf("%d ", pn->val);

	}
	else
	{
		printf("出错了。。。");
	}
	printf("\n");
	//释放内存
	Free_CircleLinkList(clist);
}
int main(int argc, char const *argv[])
{
	testJoseph();
	system("pause");
	return 0;
}