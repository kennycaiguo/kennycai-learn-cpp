计算规则：
1.对于数字，直接入栈。
2.对于符号：
   <1>.从栈中弹出右操作数
   <2.>从栈中弹出左操作数
   <3>.根据符号继续运算
   <4>.将运算结果压如栈中
3.遍历结束，如果栈中只有一个元素而且是数字，说明计算正确。
可以将结果获取标签输出。

本实例有3个文件：
LinkStack.h,LinkStack.c,ptfixExpress.c
内容
LinkStack.h:
#ifndef LINKSTACK_H
#define LINKSTACK_H
#include<stdio.h>
#include<stdlib.h>

//链式栈的小节点
typedef struct LINKNODE
{
	struct LINKNODE* next;
}LinkNode;

//链时栈
typedef struct LINKSTACK
{
	struct LINKNODE  head;
	int size;
}LinkStack;

//1.初始化链式栈
LinkStack* Init_LinkStack();
//2.入栈
void PushIn_LinkStack(LinkStack* ls, LinkNode *data);

//3.出栈
void PopFrom_LinkStack(LinkStack* ls);
//4.返回栈顶元素
LinkNode* TopOf_LinkStack(LinkStack* ls);
//5.返回栈中元素个数
int SizeOf_LinkStack(LinkStack* ls);

//6.清空栈
void Clear_LinkStack(LinkStack* ls);

//7.释放栈空间
void Free_LinkStack(LinkStack* ls);
#endif
================
LinkStack.c:
#include"LinkStack.h"
/*
本实例利用链表来模拟栈空间，链表采用头插法，第一个元素代表栈顶元素，
push就是插入数据（头插法），pop就是删除第一个节点（头节点的next），
注意必须遵循先进后出的原则也就是只能由头插法，否则没有栈的效果。

*/
//1.初始化链式栈
LinkStack* Init_LinkStack()
{
	LinkStack* ls = (LinkStack*)malloc(sizeof(LinkStack));
	ls->head.next = NULL;
	ls->size = 0;
	return ls;
}
//2.入栈
void PushIn_LinkStack(LinkStack* ls, LinkNode *data)
{
	if (ls == NULL)
	{
		return;
	}
	if (data == NULL)
	{
		return;
	}
	//头插法
	data->next =ls->head.next;
	ls->head.next = data;

	//更新size
	ls->size++;
}

//3.出栈
void PopFrom_LinkStack(LinkStack* ls)
{
	if (ls == NULL)
	{
		return;
	}
	if (ls->size == 0)
	{
		return;
	}
	LinkNode* pNext = ls->head.next;
		ls->head.next = pNext->next;
	ls->size--;
}
//4.返回栈顶元素
LinkNode* TopOf_LinkStack(LinkStack* ls)
{
	if (ls == NULL)
	{
		return NULL;
	}
	if (ls->size == 0)
	{
		return NULL;
	}
	return ls->head.next;

}
//5.返回栈中元素个数
int SizeOf_LinkStack(LinkStack* ls)
{
	if (ls == NULL)
	{
		return -1;
	}
	
	return ls->size;
}

//6.清空栈
void Clear_LinkStack(LinkStack* ls)
{

	if (ls == NULL)
	{
		return;
	}
	ls->head.next = NULL;
	ls->size = 0;
}

//7.释放栈空间
void Free_LinkStack(LinkStack* ls)
{
	if (ls != NULL)
	{
		free(ls);
	}
}
===============
ptfixExpress.c
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include"LinkStack.h"
//定义一个识别数字的函数
int IsNum(char c)
{
	return c >= '0'&& c <= '9';
}
typedef struct MYNUM
{
	LinkNode node;
	int val;
}MyNum;

//定义一个计算函数
int Calculate(int a, int b, char op)
{
	int result = 0;
	switch (op)
	{
	case '+':
		result = a + b;
		break;
	case '-':
		result = a - b;
		break;
	case '*':
		result = a * b;
		break;
	case '/':
		if (b != 0)
		{
			result = a / b;
		}
		
		break;
	default:
		break;
		
	}
	return result;
}
void testPostfixExpr()
{
	//定义一个后缀表达式
	char* str = "831-5*+";
	char* p = str;
	//创建栈
	LinkStack* ls = Init_LinkStack();
	while (*p != '\0')
	{
		//如果是数字，直接入栈
		if (IsNum(*p))
		{
			MyNum* mynum = (MyNum*)malloc(sizeof(MyNum));
			//将数字字符转换为数字并且给结构体成员赋值
			mynum->val = *p - '0';
			PushIn_LinkStack(ls, (LinkNode*)mynum);
		}
		
		else
		{ 
			//如果是操作符，先从栈中弹出右操作数
			MyNum* topnum = (MyNum*)TopOf_LinkStack(ls);
			int rightNum = topnum->val;
			PopFrom_LinkStack(ls);
			free(topnum);
			//在弹出左操作数
			topnum = (MyNum*)TopOf_LinkStack(ls);
			int leftNum = topnum->val;
			PopFrom_LinkStack(ls);
			free(topnum);
			//计算结果并且入栈
			int result = Calculate(leftNum, rightNum, *p);
			MyNum* num=(MyNum*)malloc(sizeof(MyNum));
			num->val = result;
			PushIn_LinkStack(ls, (LinkNode*)num);
		}
		p++;
	}
	//如果最后栈中只有一个数字，就说明是正确的,取出并输出结果
	if (SizeOf_LinkStack(ls) == 1)
	{
		MyNum* retnum = (MyNum*)TopOf_LinkStack(ls);
		/*int result = retnum->val;*/
		printf("后缀表达式：\"%s\" 的电脑运算结果是：%d\n",str, retnum->val);
		PopFrom_LinkStack(ls);
		free(retnum);
	}
	//释放栈空间
	Free_LinkStack(ls);
}
int main(int argc, char const *argv[])
{
	testPostfixExpr();
	system("pause");
	return 0;
}
================




