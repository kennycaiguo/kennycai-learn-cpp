假设序列中有 n 个数，将这 n 个数放到数组 A 中。“舞动算法”中一趟快速排序的算法是：
设置两个变量 i、j，排序开始的时候：i=0，j=n–1。
以数组第一个元素为关键数据，赋给变量 key，即 key=A[0]。
从 j 开始向前搜索，即由后开始向前搜索（j--），找到第一个小于 key 的值 A[j]，将 A[j] 和 A[i] 互换。
然后再从 i 开始向后搜索，即由前开始向后搜索（++i），找到第一个大于 key 的 A[i]，将 A[i] 和 A[j] 互换。
重复第 3、4 步，直到 i=j。此时就能确保序列中所有元素都与 key 比较过了，且 key 的左边全部是比 key 小的，key 的右边全部是比 key 大的。

第一轮比较后序列就以 key 为中心分成了左右两部分，然后分别对左右两部分分别递归执行上面几个步骤，直到排序结束。

 实例quickqort.c：

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <time.h>
#include <sys/timeb.h>
#define MAX 10

//封装一个获取系统时间的函数，用于计时
long GetSystemTime()
{
	struct timeb tb;
	ftime(&tb);
	return tb.time * 1000 + tb.millitm;
}

void swap(int* x, int* y)
{
	int tmp = *x;
	*x = *y;
	*y = tmp;
}
void QuickSort(int *a, int low, int high)
{
	int i = low;
	int j = high;
	int key = a[low];
	if (low >= high)  //如果low >= high说明排序结束了
	{
		return;
	}
	while (low < high)  //该while循环结束一次表示比较了一轮
	{
		while (low < high && key <= a[high])
		{
			--high;  //向前寻找
		}
		if (key > a[high])
		{
			swap(&a[low], &a[high]);
			++low;
		}
		while (low < high && key >= a[low])
		{
			++low;  //向后寻找
		}
		if (key < a[low])
		{
			swap(&a[low], &a[high]);
			--high;
		}
	}
	QuickSort(a, i, low - 1);  //用同样的方式对分出来的左边的部分进行同上的做法
	QuickSort(a, low + 1, j);  //用同样的方式对分出来的右边的部分进行同上的做法
}

void QuickSortRecursion(int *arr, int start, int end)//写法2
{
	int i = start;
	int j = end;
	int tmp = arr[start];
	if (i < j)
	{
		while (i < j)
		{
			//从右往左找比基准数小的
			while (i<j &&  arr[j] >= tmp)
			{
				j--;
			}
			 //填坑
			if (i < j)
			{
				arr[i] = arr[j];
				i++;
			}
			//从左往右找比基准数大的
			
			while (i<j && arr[i]<tmp)
			{
				i++;
			}
			//填坑
			if (i < j)
			{
				arr[j] = arr[i];
				j--;
			}
		}
		//此时i==j把基准数放到i或者j的位置
		arr[i] = tmp;
		//开始递归
		//对基准数左半部分快速排序
		QuickSortRecursion(arr, start, i-1);
		//对基准数右半部分快速排序
		QuickSortRecursion(arr, i+1, end);
	}
}
void PrintArr(int* arr, int len)
{
	for (int i = 0; i < len; i++)
	{
		printf("%d ", arr[i]);

	}
	printf("\n");
}

void testQuickSort()
{
	int arr[MAX];
	int low = 0;
	int high = MAX-1;
	srand((unsigned int)time(NULL));
	for (int i = 0; i < MAX; i++)
	{
		arr[i] = rand() % MAX;
	}
	printf("before sort\n");
	PrintArr(arr, MAX);
	QuickSortRecursion(arr, low,high);
	printf("After sort\n");
	PrintArr(arr, MAX);
}

int main(int argc, char const *argv[])
{
	testQuickSort();
	system("pause");
	return 0;
}