希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；
随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，
整个文件恰被分成一组，算法便终止。效率比插入排序高很多。

实例：shellSort.c
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/timeb.h>
#define MAX 10

//封装一个获取系统时间的函数，用于计时
long GetSystemTime()
{
	struct timeb tb;
	ftime(&tb);
	return tb.time * 1000 + tb.millitm;
}

void swap(int* x, int* y)
{
	int tmp = *x;
	*x = *y;
	*y = tmp;
}

void PrintArr(int* arr, int len)
{
	for (int i = 0; i < len; i++)
	{
		printf("%d ", arr[i]);

	}
	printf("\n");
}

void shell_sort(int arr[], int len) { //写法一，每一次增量=len/2，相当于>>1直到增量为1，这时候进行插入法排序，完成
	int gap, i, j;
	int temp;
	for (gap = len >> 1; gap > 0; gap >>= 1)
		for (i = gap; i < len; i++) {
		temp = arr[i];
		for (j = i - gap; j >= 0 && arr[j] > temp; j -= gap)
			arr[j + gap] = arr[j];
		arr[j + gap] = temp;
		}
}
void shell_sort2(int arr[], int length)//写法2，每一次增量=len/3=1,直到增量为1，这时候进行插入法排序，完成
{
	//定义增量
	int increment = length ;
	int i, j,k;
	do
	{   //计算分组的增量
		increment = increment / 3 +1;
		for ( i = 0; i < increment; i++)
		{
			for (j = i+increment; j < length; j+=increment)
			{
				if (arr[j]<arr[j-increment])
				{
					int tmp = arr[j];
					for (k = j - increment; k >= 0 && tmp < arr[k];k-=increment){
						arr[k + increment] = arr[k];
					}
					arr[k + increment] = tmp;
				}
			}
		}
	} while (increment>1);
}
void testShellSort()
{
	int arr[MAX];
	srand((unsigned int)time(NULL));
	for (int i = 0; i < MAX; i++)
	{
		arr[i] = rand() % MAX;
	}
	printf("before sort\n");
	PrintArr(arr, MAX);
	shell_sort2(arr, MAX);
	printf("After sort\n");
	PrintArr(arr, MAX);
}

int main(int argc, char const *argv[])
{
	testShellSort();
	system("pause");
	return 0;
}
