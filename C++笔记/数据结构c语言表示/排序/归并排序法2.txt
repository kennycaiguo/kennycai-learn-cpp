实例
MergeSort++.cpp：

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <time.h>
#include <sys/timeb.h> 
using namespace std;

#define MAX 10

//封装一个获取系统时间的函数，用于计时
long GetSystemTime()
{
	struct timeb tb;
	ftime(&tb);
	return tb.time * 1000 + tb.millitm;
}

void swap(int* x, int* y)
{
	int tmp = *x;
	*x = *y;
	*y = tmp;
}
void PrintArr(int* arr, int len)
{
	for (int i = 0; i < len; i++)
	{
		printf("%d ", arr[i]);

	}
	printf("\n");
}

int* CreateArr()
{
	int* arr = (int*)malloc(sizeof(int)*MAX);
	srand((unsigned int)time(NULL));
	for (int i = 0; i < MAX; i++)
	{
		arr[i] = rand() % MAX;
	}
	return arr;
}
//合并算法
void Merge(int arr[], int start, int end, int mid, int* tmp)
{
	//定义第一个序列的起始位置和结束位置
	int i_start = start;
	int i_end = mid;

	//定义第二个序列的起始位置和结束位置
	int j_start = mid + 1;
	int j_end = end;
	//临时空间元素的个数
	int length = 0;
	//因为这两个序列的长度不一定相等，可能右一个先结束
	while (i_start<=i_end && j_start<=j_end)
	{
		if (arr[i_start] < arr[j_start])
		{
			tmp[length] = arr[i_start];
			i_start++;
			length++;
		}
		else
		{
			tmp[length] = arr[j_start];
			j_start++;
			length++;
		}
	}
	//如果j先结束，将i这个序列剩余的元素拷贝到tmp。
	while (i_start <= i_end)
	{
		tmp[length] = arr[i_start];
		i_start++;
		length++;
	}
	//如果i先结束将j这个序列剩余的元素拷贝到tmp。
	while (j_start <= j_end)
	{
		tmp[length] = arr[j_start];
		j_start++;
		length++;
	}

	//最后，把temp的数据刷会arr
	for (int i = 0; i < length; i++)
	{
		arr[start+i] = tmp[i];
	}
}

void MergeSort(int arr[], int start, int end, int* tmp)
{
	//递归结束的条件是前后两个位置相等
	if (start >= end)
	{
		return;
	}
	int mid = (start + end) / 2;
	//分组,左半边
	MergeSort(arr, start, mid, tmp);
	//分组,右半边
	MergeSort(arr, mid+1, end, tmp);
	//合并
	Merge(arr, start, end, mid, tmp);
}
void testmergsort()
{
	int *arr = CreateArr();
	printf("before sort\n");
	PrintArr(arr, MAX);
	int start = 0;
	int end = MAX - 1;
	int* tmp = (int*)malloc(sizeof(int)*MAX);
	MergeSort(arr, start, end,tmp);
	printf("After sort\n");
	PrintArr(arr, MAX);
	free(tmp);
	free(arr);
}
int main(int argc, char const *argv[])
{
	testmergsort();
	system("pause");
	return 0;
}
