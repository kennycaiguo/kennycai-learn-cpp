归并排序
一。个人理解
归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干
个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。

所以归并排序的核心在于先分解，再合并。

其基本思路就是将数组分成二组A，B，如果这二组组内的数据都是有序的，那么就可以很方便的将这二组
数据进行排序。

那么如何让这二个数组组内数据有序呢？

可以将A，B组各自再分成二组。依次类推，当分出来的小组只有一个数据时，可以认为这个小组组内已经
达到了有序，然后再合并相邻的二个小组就可以了。这样通过先递归的分解数列，再合并数列就完成了归并
排序。

好了，下面就是具体操作过程：

1) 将n个元素分成各含n/2个元素的子序列

2)用归并排序法对这两个子序列递归地排序

3)合并这两个已经排序好的子序列得到排序结果

 实例：mergesort.c
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/timeb.h>
#define MAX 10

//封装一个获取系统时间的函数，用于计时
long GetSystemTime()
{
	struct timeb tb;
	ftime(&tb);
	return tb.time * 1000 + tb.millitm;
}

void swap(int* x, int* y)
{
	int tmp = *x;
	*x = *y;
	*y = tmp;
}
void PrintArr(int* arr, int len)
{
	for (int i = 0; i < len; i++)
	{
		printf("%d ", arr[i]);

	}
	printf("\n");
}
void Merge(int arr[], int start, int mid, int end)
{
	//定义一个临时数组
	int tmp[MAX] = { 0 };
	int i=0;//第一个数组索引
	int j=0;//第二个数组索引
	int k=0;//临时数组索引
	for (int i = start, j = mid + 1, k = 0; k <= end - start;k++)
	{
		//若 i 到达第一个数组的尾部，将第二个数组余下元素复制到 临时数组中
		if (i == mid + 1)
		{
			tmp[k] = arr[j++];
			continue;
		}
		//若 j 到达第二个数组的尾部，将第一个数组余下元素复制到 临时数组中
		if (j == end+1)
		{
			tmp[k] = arr[i++];
			continue;
		}
		//如果第一个数组的当前元素 比 第二个数组的当前元素小，将 第一个数组的当前元素复制到 临时数组中
		if (arr[i] < arr[j])
		{
			tmp[k] = arr[i++];
		}

		//如果第二个数组的当前元素 比 第一个数组的当前元素小，将 第二个数组的当前元素复制到 临时数组中
		else
		{
			tmp[k] = arr[j++];
		}	
	
	}
	//将有序的临时数组 元素 刷回 被排序的数组 array 中，
	//i = start , 被排序的数组arr的起始位置
	//j = 0， 临时数组tmp的起始位置
	for (int i = start,j=0; i <=end; i++,j++)
	{
		arr[i] = tmp[j];
	}

}
void MergeSort(int arr[],int start,int end)
{
	if (start < end)
	{
		int mid=(start+end)/2;
		// 对前半部分进行排序
		MergeSort(arr, start, mid);
		// 对后半部分进行排序
		MergeSort(arr, mid+1, end);
		//进行合并
		Merge(arr, start, mid, end);

	}


}
void testMergeSort()
{
	int arr[MAX];
	int low = 0;
	int high = MAX - 1;
	srand((unsigned int)time(NULL));
	for (int i = 0; i < MAX; i++)
	{
		arr[i] = rand() % MAX;
	}
	printf("before sort\n");
	PrintArr(arr, MAX);
	MergeSort(arr, low, high);
	printf("After sort\n");
	PrintArr(arr, MAX);
}
int main(int argc, char const *argv[])
{
	testMergeSort();
	system("pause");
	return 0;
}