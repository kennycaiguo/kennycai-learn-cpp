选择排序（Selection sort）是一种简单直观的排序算法。 它的工作原理是：
第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序
元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。 以此类推，直到全部待排序的数据元素的个数为零。 选择排序是不稳定的排序方法。
选择排序法的效率比冒泡排序高，但是也是效率比较低的。
实例：selectiveSort.c
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/timeb.h>
#define MAX 10

//封装一个获取系统时间的函数，用于计时
long GetSystemTime()
{
	struct timeb tb;
	ftime(&tb);
	return tb.time * 1000 + tb.millitm;
}

void swap(int* x, int* y)
{
	int tmp = *x;
	*x = *y;
	*y = tmp;
}
void PrintArr(int* arr, int len)
{
	for (int i = 0; i < len; i++)
	{
		printf("%d ", arr[i]);

	}
	printf("\n");
}
void SelectiveSort(int* arr, int length)
{
	for (int i = 0; i < length-1; i++)
	{
		for (int j = i; j < length; j++)
		{
			if (arr[i] < arr[j])
			{
				swap(&arr[i], &arr[j]);
			}
		}
	}
}
void SelectiveSort2(int* arr, int length)//从小到大
{
	for (int i = 0; i < length; i++)
	{
		int min = i;
		for (int j = i+1; j < length; j++)
		{
			if (arr[j] < arr[min])
			{
				min = j;
			}
		}
		if (min != i)
		{
			swap(&arr[min], &arr[i]);
		}
	}
}
void testSelectiveSort()
{
	int arr[MAX];
	srand((unsigned int)time(NULL));
	for (int i = 0; i < MAX; i++)
	{
		arr[i] = rand() % MAX;
	}
	printf("before sort\n");
	PrintArr(arr, MAX);
	SelectiveSort2(arr, MAX);
	printf("After sort\n");
	PrintArr(arr, MAX);
}
int main(int argc, char const *argv[])
{
	testSelectiveSort();
	system("pause");
	return 0;
}