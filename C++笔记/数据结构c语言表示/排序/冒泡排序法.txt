冒泡排序效率很低，可以稍微改进，但是没有太多的改进：
实例：
bubblesort.c：
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/timeb.h>
#define MAX 10
int flag = 0;//0 表示还没有排序好
long GetSystemTime()
{
	struct timeb tb;
	ftime(&tb);
	return tb.time * 1000 + tb.millitm;
}
void BubbleSort(int* arr,int len)//从小到大排序
{
	int tmp=0;
	for (int i = 0; i < len-1; i++)
	{
		for (int j = 0; j <len-1-i; j++)
		{
			if( arr[j] > arr[j + 1])
			{
				tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
}
void BubbleSort2(int* arr, int len) //从大到小排序
{
	int tmp = 0;
	for (int i = 0; i < len ; i++)
	{
		for (int j = len-1; j > i; j--)
		{
			if (arr[j-1] < arr[j])
			{
				tmp = arr[j-1];
				arr[j-1] = arr[j ];
				arr[j] = tmp;
			}
		}
	}
}

void EnhancedBubbleSort(int* arr, int len)//改进版，需要一个flag变量
{
	int tmp = 0;
	for (int i = 0; i < len && flag==0; i++)
	{
		flag = 1;//认为已经排好序了
		for (int j = len - 1; j > i; j--)
		{
			if (arr[j - 1] < arr[j])
			{
				flag = 0;//认为没有排好
				tmp = arr[j - 1];
				arr[j - 1] = arr[j];
				arr[j] = tmp;
			}
		}
	}
}
void PrintArr(int* arr, int len)
{
	for (int i = 0; i < len; i++)
	{
		printf("%d ", arr[i]);

	}
	printf("\n");
}
void testBubbleSort()
{
	int arr[MAX];
	srand((unsigned int)time(NULL));
	for (int i = 0; i < MAX; i++)
	{
		arr[i] = rand() % MAX;
	}
	printf("before sort:\n");
	PrintArr(arr, MAX);
	//long t_start = GetSystemTime();
	 
	BubbleSort2(arr, MAX);
	long t_stop = GetSystemTime();
	printf("After sort:\n");
	PrintArr(arr, MAX);
 
	//printf("%d个元素排序耗时%ld\n毫秒", MAX,t_stop - t_start);
	
}
int main(int argc, char const *argv[])
{
	testBubbleSort();
	system("pause");
	return 0;
}