heapsort.c的内容如下：
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void PrintArr(int* arr, int len)
{
	for (int i = 0; i < len; i++)
	{
		printf("%d ", arr[i]);

	}
	printf("\n");
}
//定义一个交换函数
void MySwap(int arr[], int a, int b)
{
	int tmp = arr[a];
	arr[a] = arr[b];
	arr[b] = tmp;
}
/*********************
   arr:待调整的数组
   index：带调整的下标
   length：数组长度
**********************/
void HeapAdjust(int arr[], int index, int length)
{
	//先保存当前节点的下标
	int max = index;
	//保存左右孩子的数组下标
	int lchild = 2 * index + 1;
	int rchild = 2 * index + 2;
	if (lchild<length && arr[lchild]>arr[max])
	{
		max = lchild;
	}
	if (rchild<length && arr[rchild]>arr[max])
	{
		max = rchild;
	}
	if (max != index)
	{
		MySwap(arr, max, index);
		HeapAdjust(arr, max, length);
	}
}
//堆排序函数
void HeapSort(int arr[], int length)
{
	//初始化堆
	for (int i = (length/2)-1; i >=0; i--)
	{
		HeapAdjust(arr, i, length);
	}
	//交换堆顶元素和最后一个元素
	for (int i = length - 1; i >=0; i--)
	{
		MySwap(arr, 0, i);
		HeapAdjust(arr, 0, i);
	}
}
void testHeapSort()
{
	int arr[] = { 4, 2, 8, 0, 5, 7, 1, 3, 9 };
	int length = sizeof(arr) / sizeof(arr[0]);
	//printf("length=%d\n", length);
	printf("Before sort\n");
	PrintArr(arr, length);
	//堆排序
	HeapSort(arr, length);
	printf("After sort\n");
	PrintArr(arr, length);
}
int main(int argc, char const *argv[])
{
	testHeapSort();
	system("pause");
	return 0;
}