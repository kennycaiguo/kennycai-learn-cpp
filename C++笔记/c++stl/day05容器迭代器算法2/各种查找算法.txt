常用的查找算法如下：
find(beg,end,value)返回迭代器
adjacent_fine(beg,end,_callback):查找容器中是否有重复元素，返回迭代器
binary_search(beg,end,value)返回true或者false //也叫二分法查找
find_if(beg,end,_callback) 返回迭代器
count(beg,end,value)返回找到的数量
count_if(beg,end,_callback)返回找到的数量

实例：
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include<functional>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <list>
#include <algorithm>
#include <sstream>

using namespace std;
void testFindBasicType()
{
	vector<int> v1, v2;
	for (int i = 0; i < 10; i++)
	{
		v1.push_back(i);
	}
	vector<int>::iterator res = find(v1.begin(), v1.end(), 5);
	//cout << *res << endl;
	if (res != v1.end())
	{
		cout << "找到了:" <<*res<< endl;
	}
	else
	{
		cout << "没有找到。。。" << endl;
	}
}
class Person
{
public:
	Person(){}
	Person(string name, int age) :name(name), age(age){}
	void showInfo()
	{
		cout << "Person[name:" << name << ",age:" << age << "]" << endl;
	}
	bool operator==(const Person& p) const //注意：参数需要const，否则报错
	{
		if (this->name == p.name && this->age == p.age)
		{
			return true;
		}
		return false;
	}
	bool operator<(const Person&p) const
	{
		return this->age < p.age;
	}
public:
	string name;
	int age;
};

class FindPerson:public binary_function<Person,Person,bool>{
public:
	bool operator()(Person p1, Person p2)const
	{
		return p1 == p2;
	}
};
void testObj_find_if()
{
	vector<Person> vp;
	Person p1("Vicky", 35), p2("Jenny", 45), p3("Fred", 30);
	vp.push_back(p1);
	vp.push_back(p2);
	vp.push_back(p3);
	//vector<Person>::iterator res = find_if(vp.begin(), vp.end(), bind2nd(FindPerson(),p1));//这个比较麻烦
	vector<Person>::iterator res = find(vp.begin(), vp.end(), p1);
	res->showInfo();
}

//binary_search也叫做二分查找法
void test_binary_search()
{
	vector<int> v1, v2;
	for (int i = 0; i < 10; i++)
	{
		v1.push_back(i);
	}
	bool bFound=binary_search(v1.begin(), v1.end(), 5);
	if (bFound)
	{
		cout << "找到了。。。" << endl;
	}
	else
	{
		cout << "没找到。。。" << endl;
	}
}
/*
 使用binary_search查找算法查找自定义对象时，需要在对应的类中重载<操作符和==操作符，否则不能报错
*/
void test_binary_search_obj()
{
	vector<Person> vp;
	Person p1("Vicky", 35), p2("Jenny", 45), p3("Fred", 30);
	vp.push_back(p1);
	vp.push_back(p2);
	vp.push_back(p3);
	bool bFound = binary_search(vp.begin(), vp.end(), Person("Vicky", 35));
	if (bFound)
	{
		cout << "找到了。。。" << endl;
	}
	else
	{
		cout << "没找到。。。" << endl;
	}
}
class Point{
public:
	Point(){}
	Point(int x, int y) :x(x), y(y){}
	bool operator==(const Point& pt) const
	{
		return this->x == pt.x && this->y == pt.y;
	}
	friend ostream& operator<<(ostream& os, const Point& pt);
public:
	int x;
	int y;
};

void testObj_find()
{
	vector<Point> v;
	Point p1(10, 20), p2(30, 40), p3(100, 200);
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	vector<Point>::iterator ret=find(v.begin(), v.end(), p1);
	if (ret != v.end())
	{
		cout << "找到了" << endl;
	}
	else{
		cout << "没有找到。。。" << endl;
	}
}

class docompare
{
public:
	bool operator()(int v1, int v2)
	{
		return v1 == v2;
	}
};
//adjacent_find查找方法:查找相邻重复元素

void test_adjacent_find()
{
	vector<int> v;
	/*for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}*/
	v.push_back(1);
	v.push_back(1);
	v.push_back(2);
	v.push_back(3);

	//vector<int>::iterator ret=adjacent_find(v.begin(), v.end(), docompare());
	vector<int>::iterator ret = adjacent_find(v.begin(), v.end());
	if (ret != v.end())
	{
		cout << "找到了重复元素："<<*ret << endl;
	}
	else
	{
		cout << "没到了！！" << endl;
	}
}

ostream& operator<<(ostream& os, const Point& pt)
{
	os << "Point[x:" << pt.x << ",y:" << pt.y <<"]"<< endl;
	return os;
}
void test_adjacent_find_obj()
{
	vector<Point> v;
	Point p1(10, 20), p2(30, 40), p3(100, 200);
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p3);
	vector<Point>::iterator ret = adjacent_find(v.begin(), v.end());
	if (ret != v.end())
	{
		cout << "找到了重复元素：" << *ret << endl;
	}
	else
	{
		cout << "没到了！！" << endl;
	}
}

void testCount()
{
	vector<int> v;
	/*for (int i = 0; i < 10; i++)
	{
	v.push_back(i);
	}*/
	v.push_back(1);
	v.push_back(1);
	v.push_back(2);
	v.push_back(3);
	v.push_back(3);
	int size = count(v.begin(), v.end(), 1);
	cout << "1 出现了：" << size << "次" << endl;
}
int main(int argc, char const *argv[])
{
	//testFindBasicType();
	//testObj_find();
	//testObj_find_if();
	//test_binary_search();
	//test_binary_search_obj();
	//test_adjacent_find();
	//test_adjacent_find_obj();
	testCount();
	system("pause");
	return 0;
}
